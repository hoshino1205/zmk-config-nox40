#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

&lt {
    quick-tap-ms = <180>;
    flavor = "tap-preferred";
};

&mt {
    quick-tap-ms = <180>;
    flavor = "tap-preferred";
};

&sl { release-after-ms = <250>; };

/ {
    behaviors {
        ht: my_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        td_QEC: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&mt LCTRL Q>, <&kp ESC>;
        };

        td_CS: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp COMMA>, <&kp SEMI>;
        };

        td_DC: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp DOT>, <&kp JP_COLON>;
        };

        td_CME: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt RCTRL MINUS>, <&kp JP_EQUAL>;
        };

        scroll_up_down: scroll_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            label = "SCROLL_UP_DOWN";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        TdLeftThumb2: TdLeftThumb2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TDLEFTTHUMB2";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&sk LEFT_CONTROL>, <&kp ESCAPE>;
        };

        TdTabOnQKey: TdTabOnQKey {
            compatible = "zmk,behavior-tap-dance";
            label = "TDTABONQKEY";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp Q>, <&kp TAB>;
        };

        MmLeftHome: MmLeftHome {
            compatible = "zmk,behavior-mod-morph";
            label = "MMLEFTHOME";
            bindings = <&kp LEFT>, <&kp HOME>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        MmDownPD: MmDownPD {
            compatible = "zmk,behavior-mod-morph";
            label = "MMDOWNPD";
            bindings = <&kp DOWN>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        MmUpPU: MmUpPU {
            compatible = "zmk,behavior-mod-morph";
            label = "MMUPPU";
            bindings = <&kp UP_ARROW>, <&kp PAGE_UP>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        MmRightEnd: MmRightEnd {
            compatible = "zmk,behavior-mod-morph";
            label = "MMRIGHTEND";
            bindings = <&kp RIGHT>, <&kp END>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        BS {
            bindings = <&kp LS(BACKSPACE)>;
            key-positions = <20 21>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        underscore {
            bindings = <&kp LS(INTERNATIONAL_1)>;
            key-positions = <8 9>;
        };

        hyphen {
            bindings = <&kp MINUS>;
            key-positions = <9 10>;
        };

        redo {
            bindings = <&kp LC(Y)>;
            key-positions = <27 28>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <14 15>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <13 14>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <26 27>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <15 16>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <10 11>;
        };

        mb1-left {
            bindings = <&mkp MB1>;
            key-positions = <25 26 27>;
        };

        mb2 {
            bindings = <&mkp MB2>;
            key-positions = <21 22>;
        };

        MoveToPE {
            bindings = <&kp LC(END)>;
            key-positions = <30 31 32>;
        };

        MoveToPT {
            bindings = <&kp LC(HOME)>;
            key-positions = <20 21 22>;
        };

        CloseTab {
            bindings = <&kp LG(W)>;
            key-positions = <30 31 32 33>;
        };

        RedoTab {
            bindings = <&kp LS(LG(T))>;
            key-positions = <21 22 23 20>;
        };
    };

    macros {
        setphrase1: setphrase1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LS(S) &kp H &kp O &kp W &kp A &kp N3 &kp N7 &kp N1 &kp N2 &kp N0 &kp N5>;
            label = "SETPHRASE1";
        };

        setphrase2: setphrase2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp H &kp O &kp S &kp H &kp I &kp N &kp O &kp MINUS &kp T &kp A &kp K &kp E &kp S &kp H &kp I &kp LBKT &kp M &kp K &kp I &kp DOT &kp C &kp O &kp DOT &kp J &kp P>;
            label = "SETPHRASE2";
        };

        setphrase3: setphrase3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp H &kp O &kp S &kp H &kp I &kp N &kp O &kp LBKT &kp P &kp T &kp U &kp N &kp E &kp D &kp DOT &kp N &kp E &kp T>;
            label = "SETPHRASE3";
        };

        addquotechar: addquotechar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LANGUAGE_2 &kp GREATER_THAN &kp HOME &kp DOWN>;
            label = "ADDQUOTECHAR";
        };

        AddParenthsis: AddParenthsis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp ASTERISK &kp NON_US_HASH &kp LEFT &kp LANGUAGE_1>;
            label = "ADDPARENTHSIS";
        };

        AddBracket: AddBracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp RIGHT_BRACKET &kp NON_US_HASH &kp LEFT &kp LANGUAGE_1>;
            label = "ADDBRACKET";
        };

        AddDoublequote: AddDoublequote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp AT &kp AT &kp LEFT &kp LANGUAGE_1>;
            label = "ADDDOUBLEQUOTE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&td_QEC  &kp W  &kp E  &kp R  &kp T  &kp ESC  &kp PAGE_UP  &kp Y  &kp U  &kp I  &kp O  &kp P  &kp A  &kp S  &kp D  &kp F  &kp G  &kp TAB  &kp PAGE_DOWN  &kp H  &kp J  &kp K  &kp L  &kp RET  &ht LSHFT Z  &kp X  &kp C  &kp V  &kp B  &kp N  &kp M  &td_CS  &td_DC  &ht RSHFT SLASH  &mt LALT CAPS  &lt 1 SPACE  &lt 3 DEL  &lt 4 BSPC  &lt 2 RET  &mt RGUI K_APP
            >;
        };

        layer_1 {
            bindings = <
&kp JP_PLUS  &kp MINUS  &kp JP_ASTERISK  &kp SLASH  &kp JP_UNDERSCORE  &kp JP_LBRACE  &kp JP_LBRACKET  &kp JP_EQUAL  &kp JP_COLON  &kp DOT  &kp JP_YEN  &kp JP_TILDE  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp JP_RBRACE  &kp JP_RBRACKET  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &trans  &trans  &mo 5  &trans  &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
&kp LA(TAB)  &kp LG(TAB)  &kp LG(V)  &kp LG(Z)  &kp LG(X)  &kp LC(C)  &kp LG(D)  &trans  &kp PG_UP  &kp UP  &kp PG_DN  &trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp LC(V)  &kp LG(E)  &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT  &kp BSPC  &ht LSHFT F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp END  &trans  &kp LA(UP)  &trans  &trans  &trans  &trans  &trans  &mo 5  &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&kp EXCL  &kp JP_DQUOTE  &kp HASH  &kp DLLR  &kp PRCNT  &kp LG(Z)  &kp C_VOL_UP  &kp JP_AMPERSAND  &kp JP_QUOTE  &kp JP_LPAREN  &kp JP_RPAREN  &kp JP_CARET  &trans  &trans  &trans  &trans  &trans  &kp LG(TAB)  &kp C_VOL_DN  &kp JP_AT  &kp JP_BACKQUOTE  &kp JP_LBRACKET  &kp JP_LBRACE  &trans  &trans  &trans  &trans  &trans  &trans  &mkp JP_PLUS  &kp JP_ASTERISK  &kp JP_RBRACKET  &kp JP_RBRACE  &kp JP_UNDERSCORE  &trans  &mo 5  &trans  &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp PSCRN  &trans  &msc SCRL_UP  &mmv MOVE_UP  &msc SCRL_DOWN  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans  &trans  &trans  &trans  &trans  &mkp RCLK  &trans  &mkp MCLK  &trans  &trans  &trans  &trans  &trans  &trans  &mo 5  &trans
            >;
        };

        layer_5 {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &bt BT_CLR  &bt BT_CLR_ALL  &bt BT_CLR_ALL  &bt BT_CLR  &trans  &trans  &trans  &trans  &bootloader  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &bootloader  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
